{"version":3,"sources":["../node_modules/@neurosity/pipes/dist/browser sync","utils/mockData.js","utils/dataGen.js","components/EEGView.js","App.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","emptyData","ch0","name","data","ch1","ch2","ch3","emptyBandData","chartOptions","scales","xAxes","scaleLabel","display","labelString","ticks","gridLines","yAxes","max","min","elements","line","borderColor","fill","point","radius","animation","duration","title","text","responsive","tooltips","enabled","legend","timeOptions","barOptions","require","interval","from","map","flatMap","transform","index","timestamp","Date","now","pipe","electrode","samples","Array","_","Math","random","x","EEGView","source$","subject$","labels","useState","setData","bandData","setBandData","timeBandData","setTimeBandData","connected","setConnected","drop","setDrop","channelState","setChannel","settings","buildEEGPipe","zipSamples","multicast","Subject","bandpassFilter","cutoffFrequencies","nbChannels","epoch","samplingRate","catchError","err","console","log","subscribe","streamData","dataState","Object","values","forEach","channel","buildFFTPipe","fft","bins","powerByBand","bandState","alpha","beta","timeBand","a","client","MuseClient","connect","start","eegReadings","ChartView","props","dataValues","vals","className","xLabels","datasets","options","BarView","backgroundColor","lg","size","disabled","onClick","sampleRate","mockMuseEEG","window","location","reload","open","toggle","prev","App","style","marginTop","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uGAAA,SAASA,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,K,iKCPZC,EAAY,CACrBC,IAAK,CACDC,KAAM,KACNC,KAAM,IAEVC,IAAK,CACDF,KAAM,KACNC,KAAM,IAEVE,IAAK,CACDH,KAAM,KACNC,KAAM,IAEVG,IAAK,CACDJ,KAAM,MACNC,KAAM,KAIDI,EAAgB,CAC3BN,IAAK,CACDC,KAAM,KACNC,KAAM,IAEVC,IAAK,CACDF,KAAM,KACNC,KAAM,IAEVE,IAAK,CACDH,KAAM,KACNC,KAAM,IAEVG,IAAK,CACDJ,KAAM,MACNC,KAAM,KAICK,EAAe,CACxBC,OAAQ,CACNC,MAAO,CACL,CACEC,WAAY,CACVC,SAAS,EACTC,YAAa,QAEfC,MAAO,CACLF,SAAS,GAEXG,UAAW,CACTH,SAAS,KAIfI,MAAO,CACL,CACEL,WAAY,CACVC,SAAS,EACTC,YAAa,uBAEfC,MAAO,CACLF,SAAS,EACTK,IAAK,IACLC,KAAM,KAERH,UAAW,CACTH,SAAS,MAKjBO,SAAU,CACNC,KAAM,CACFC,YAAa,wBACbC,MAAM,GAEVC,MAAO,CACHC,OAAQ,IAGhBC,UAAW,CACPC,SAAU,GAEdC,MAAO,CACLf,SAAS,EACTgB,KAAM,IAERC,YAAY,EACZC,SAAU,CAAEC,SAAS,GACrBC,OAAQ,CAAEpB,SAAS,IAGRqB,EAAc,CACzBxB,OAAQ,CACNC,MAAO,CACL,CACEC,WAAY,CACVC,SAAS,EACTC,YAAa,QAEfC,MAAO,CACLF,SAAS,GAEXG,UAAW,CACTH,SAAS,KAIfI,MAAO,CACL,CACEL,WAAY,CACVC,SAAS,EACTC,YAAa,QAEfC,MAAO,CACLF,SAAS,EACTK,IAAK,GACLC,IAAK,GAEPH,UAAW,CACTH,SAAS,MAKjBO,SAAU,CACNC,KAAM,CACFC,YAAa,wBACbC,MAAM,GAEVC,MAAO,CACHC,OAAQ,IAGhBC,UAAW,CACPC,SAAU,GAEdC,MAAO,CACLf,SAAS,EACTgB,KAAM,IAERC,YAAY,EACZC,SAAU,CAAEC,SAAS,GACrBC,OAAQ,CAAEpB,SAAS,IAIVsB,EAAa,CACtBzB,OAAQ,CACNC,MAAO,CACL,CACEC,WAAY,CACVC,SAAS,EACTC,YAAa,QAEfE,UAAW,CACTH,SAAS,KAIfI,MAAO,CACL,CACEL,WAAY,CACVC,SAAS,EACTC,YAAa,uBAEfC,MAAO,CACLF,SAAS,EACTK,IAAK,GACLC,IAAK,GAEPH,UAAW,CACTH,SAAS,MAKjBa,UAAW,CACPC,SAAU,GAEdC,MAAO,CACLf,SAAS,EACTgB,KAAM,IAERC,YAAY,EACZC,SAAU,CAAEC,SAAS,GACrBC,OAAQ,CAAEpB,SAAS,I,4CC3LIuB,EAAQ,IAA3BC,E,EAAAA,SAAUC,E,EAAAA,K,EACOF,EAAQ,IAAzBG,E,EAAAA,IAAKC,E,EAAAA,QAQPC,EAAY,SAACC,GAClB,IAAMC,EAAYC,KAAKC,MAEvB,OAAOP,EADQ,CAAC,EAAG,EAAG,EAAG,IACHQ,KACrBP,GAAI,SAAAQ,GAAS,MAAK,CACjBJ,YACAI,YACAL,QACAM,QAbKC,MAAM,IACX1B,OACAgB,KAAI,SAAAW,GAAC,OAAIC,KAAKC,YAAUb,KAAI,SAASc,GAAI,OAAW,IAAJA,WCmSpCC,MAxRf,WAGI,IAAIC,EAAU,KACVC,EAAW,KAETC,EAASR,MAAMX,KAAKW,MAAM,KAAKrD,QANtB,EASS8D,mBAASzD,GATlB,mBASRG,EATQ,KASFuD,EATE,OAWiBD,mBAASlD,GAX1B,mBAWRoD,EAXQ,KAWEC,EAXF,OAayBH,mBAAS,IAblC,mBAaRI,EAbQ,KAaMC,EAbN,OAemBL,oBAAS,GAf5B,mBAeRM,EAfQ,KAeGC,EAfH,OAiBSP,oBAAS,GAjBlB,mBAiBRQ,EAjBQ,KAiBFC,EAjBE,OAmBoBT,mBAAS,GAnB7B,mBAmBRU,EAnBQ,KAmBMC,EAnBN,KAsBTC,EACM,EADNA,EAEO,GAFPA,EAGM,IAHNA,EAIQ,EAJRA,EAMG,EANHA,GAOQ,IAGd,SAASC,MAELf,EAAWgB,qBAAWjB,GAAST,KAC3B2B,aAAU,kBAAM,IAAIC,SAGE5B,KACtB6B,yBAAe,CACXC,kBAAmB,CAACN,EAAiBA,GACrCO,WAAYP,IAEhBQ,gBAAM,CACFzC,SAAUiC,EACV3C,SAAU2C,GACVS,aAAcT,IAElBU,aAAW,SAAAC,GACPC,QAAQC,IAAIF,OAOUG,WAAU,SAAAC,GACpC1B,GAAQ,SAAA2B,GAIJ,OAHAC,OAAOC,OAAOF,GAAWG,SAAQ,SAACC,EAAShD,GACvCgD,EAAQtF,KAAOiF,EAAWjF,KAAKsC,MAE5B,CACHxC,IAAKoF,EAAUpF,IACfG,IAAKiF,EAAUjF,IACfC,IAAKgF,EAAUhF,IACfC,IAAK+E,EAAU/E,WAM/B,SAASoF,KACL,IAAKnC,EACD,MAAO,QAEMA,EAASV,KACtB6B,yBAAe,CACXC,kBAAmB,CAACN,EAAiBA,GACrCO,WAAYP,IAEhBQ,gBAAM,CACFzC,SAAU,IACVV,SAAU,KACVoD,aAAcT,IAElBsB,cAAI,CAAEC,KAAM,MACZC,wBACAd,aAAW,SAAAC,GACPC,QAAQC,IAAIF,OAGUG,WAAU,SAAAC,GACpCxB,GAAY,SAAAkC,GAOR,OANAR,OAAOC,OAAOO,GAAWN,SAAQ,SAACC,EAAShD,GACvCgD,EAAQtF,KAAO,CACXiF,EAAWW,MAAMtD,GACjB2C,EAAWY,KAAKvD,OAGjB,CACHxC,IAAK6F,EAAU7F,IACfG,IAAK0F,EAAU1F,IACfC,IAAKyF,EAAUzF,IACfC,IAAKwF,EAAUxF,QAGvBwD,GAAgB,SAAAmC,GACZ,MAAM,GAAN,mBAAWA,GAAX,CAAqBb,EAAWY,KAAK,WA3GlC,8CAwHf,4BAAAE,EAAA,6DACQC,EAAS,IAAIC,aADrB,SAEUD,EAAOE,UAFjB,uBAGUF,EAAOG,QAHjB,OAIIhD,EAAU6C,EAAOI,YACjBjC,KACAoB,KACAnC,EAAS8C,UACTrC,GAAa,GARjB,6CAxHe,sBA6If,SAASwC,GAAUC,GACf,OACI,cAAC,IAAD,WAKcC,EAJID,EAAME,KAKrBrB,OAAOC,OAAOmB,GAAYpE,KAAI,SAACmD,EAAShD,GAC3C,OAAIA,IAAU0B,EAEN,cAAC,IAAD,CAAKyC,UAAU,OAAf,SACA,cAAC,IAAD,UACE,eAAC,IAAD,WACI,cAAC,IAAD,UAAYnB,EAAQvF,OACpB,cAAC,OAAD,CAAMC,KAAM,CACR0G,QAASrD,EACTsD,SAAU,CAAC,CAAC3G,KAAMsF,EAAQtF,QAAS4G,QAASvG,QAL3CiC,KAWR,WAhBnB,IAAsBiE,EA2BtB,SAASM,GAAQP,GACb,OACI,cAAC,IAAD,WAKYC,EAJID,EAAME,KAKnBrB,OAAOC,OAAOmB,GAAYpE,KAAI,SAACmD,EAAShD,GAC3C,OAAIA,IAAU0B,GACVc,QAAQC,IAAIO,EAAQtF,MAEhB,cAAC,IAAD,CAAKyG,UAAU,OAAf,SACA,cAAC,IAAD,UACE,eAAC,IAAD,WACI,cAAC,IAAD,UAAYnB,EAAQvF,OACpB,cAAC,MAAD,CAAKC,KAAM,CACP0G,QAAS,CAAC,OAAQ,SAClBC,SAAU,CACN,CACE3G,KAAMsF,EAAQtF,KACd8G,gBAAiB,CAAC,uBAClB,2BAIFF,QAAS7E,QAbZO,MAmBR,WAzBnB,IAAoBiE,EAgCpB,OACI,eAAC,IAAD,WACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAKQ,GAAG,IAAIN,UAAU,cAAtB,SACQ,eAAC,IAAD,CAAaO,KAAK,KAAlB,UACI,cAAC,IAAD,CAAQC,SAAUrD,EAAWsD,QA3NtC,4CA2NS,0BAGA,cAAC,IAAD,CAAQD,SAAUrD,EAAWsD,QA9GrD,WACI/D,ED5GmB,SAACgE,GAC3B,IAAI7E,EAAQ,EACZ,OAAOL,EAAS,IAAOkF,GAAYzE,KAClCP,GAAI,kBAAMG,GAAS,KACnBF,EAAQC,ICwGQ+E,CAAY,KACtBjD,KACAoB,KACAnC,EAAS8C,UACTrC,GAAa,IAyGO,2BAGA,cAAC,IAAD,CAAQoD,UAAWrD,EAAWsD,QA9FtD,WACIG,OAAOC,SAASC,UA6FI,6BAKZ,cAAC,IAAD,CAAKR,GAAG,IAAIN,UAAU,cAAtB,SACI,eAAC,IAAD,CAAUO,KAAK,KAAKQ,KAAM1D,EAC1B2D,OAAQ,kBAAM1D,GAAQ,SAAA2D,GAAI,OAAKA,MAD/B,UAEA,cAAC,IAAD,sBACI,cAAC,IAAD,UACKvC,OAAOC,OAAOpF,GAAMmC,KAAI,SAACmD,EAAShD,GAC/B,OAAO,cAAC,IAAD,CAEP4E,QAAS,kBAAMjD,EAAW3B,IAFnB,SAGFgD,EAAQvF,MAFRuC,gBASzB,eAAC,IAAD,WAEI,cAAC,IAAD,CAAKmE,UAAU,cAAf,SACI,cAAC,IAAD,UACI,cAACJ,GAAD,CAAWG,KAAMxG,QAKzB,cAAC,IAAD,CAAKyG,UAAU,cAAf,SACI,cAAC,IAAD,UACI,cAACI,GAAD,CAASL,KAAMhD,WAK3B,eAAC,IAAD,WACA,cAAC,IAAD,CAAKiD,UAAU,cAAf,SACQ,cAAC,IAAD,UACE,eAAC,IAAD,WACI,cAAC,IAAD,oBACA,cAAC,OAAD,CAAMzG,KAAM,CACR0G,QAAS7D,MAAMX,KAAKwB,EAAalE,QACjCmH,SAAU,CAAC,CAAC3G,KAAM0D,KAAiBkD,QAAS9E,WAI9D,cAAC,IAAD,CAAK2E,UAAU,uBCxQZkB,MAlBf,WACE,OACE,eAAC,IAAD,CAAWC,MAAO,CAACC,UAAW,OAA9B,UACE,cAAC,IAAD,CAAKpB,UAAU,OAAf,SACA,cAAC,IAAD,CAAKA,UAAU,SAAf,SACA,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,0BACA,+EAKJ,cAAC,EAAD,QCjBNqB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.1c6b119c.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 367;","\nexport const emptyData = {\n    ch0: {\n        name: \"A7\",\n        data: []\n    },\n    ch1: {\n        name: \"A8\",\n        data: []\n    },\n    ch2: {\n        name: \"T9\",\n        data: []\n    },\n    ch3: {\n        name: \"T10\",\n        data: []\n    }\n};\n\nexport const emptyBandData = {\n  ch0: {\n      name: \"A7\",\n      data: []\n  },\n  ch1: {\n      name: \"A8\",\n      data: []\n  },\n  ch2: {\n      name: \"T9\",\n      data: []\n  },\n  ch3: {\n      name: \"T10\",\n      data: []\n  }\n};\n\nexport const chartOptions = {\n    scales: {\n      xAxes: [\n        {\n          scaleLabel: {\n            display: true,\n            labelString: \"Time\"\n          },\n          ticks: {\n            display: false,\n          },\n          gridLines: {\n            display: false,\n          }\n        }\n      ],\n      yAxes: [\n        {\n          scaleLabel: {\n            display: true,\n            labelString: \"Electrical Activity\"\n          },\n          ticks: {\n            display: false,\n            max: 300,\n            min: -300\n          },\n          gridLines: {\n            display: false,\n          }\n        }\n      ]\n    },\n    elements: {\n        line: {\n            borderColor: 'rgba( 128 , 128, 128)',\n            fill: false\n        },\n        point: {\n            radius: 0\n        }\n    },\n    animation: {\n        duration: 0\n    },\n    title: {\n      display: true,\n      text: \"\"\n    },\n    responsive: true,\n    tooltips: { enabled: false },\n    legend: { display: false }\n  };\n\n  export const timeOptions = {\n    scales: {\n      xAxes: [\n        {\n          scaleLabel: {\n            display: false,\n            labelString: \"Beta\"\n          },\n          ticks: {\n            display: false,\n          },\n          gridLines: {\n            display: false,\n          }\n        }\n      ],\n      yAxes: [\n        {\n          scaleLabel: {\n            display: false,\n            labelString: \"Time\"\n          },\n          ticks: {\n            display: false,\n            max: 10,\n            min: 0\n          },\n          gridLines: {\n            display: true,\n          }\n        }\n      ]\n    },\n    elements: {\n        line: {\n            borderColor: 'rgba( 128 , 128, 128)',\n            fill: false\n        },\n        point: {\n            radius: 0\n        }\n    },\n    animation: {\n        duration: 0\n    },\n    title: {\n      display: true,\n      text: \"\"\n    },\n    responsive: true,\n    tooltips: { enabled: false },\n    legend: { display: false }\n  };\n\n\nexport const barOptions = {\n    scales: {\n      xAxes: [\n        {\n          scaleLabel: {\n            display: false,\n            labelString: \"Time\"\n          },\n          gridLines: {\n            display: false,\n          }\n        }\n      ],\n      yAxes: [\n        {\n          scaleLabel: {\n            display: false,\n            labelString: \"Electrical Activity\"\n          },\n          ticks: {\n            display: false,\n            max: 10,\n            min: 0,\n          },\n          gridLines: {\n            display: false,\n          }\n        }\n      ]\n    },\n    animation: {\n        duration: 0\n    },\n    title: {\n      display: true,\n      text: \"\"\n    },\n    responsive: true,\n    tooltips: { enabled: false },\n    legend: { display: false }\n};\n\n","const { interval, from } = require('rxjs');\nconst { map, flatMap } = require('rxjs/operators');\n\nconst samples = () => {\n return Array(12)\n  .fill()\n  .map(_ => Math.random()).map(function(x) {return x * 100});\n};\n\nconst transform = (index) => {\n const timestamp = Date.now();\n let chanNums = [0, 1, 2, 3];\n return from(chanNums).pipe(\n  map(electrode => ({\n   timestamp,\n   electrode,\n   index,\n   samples: samples()\n  }))\n )\n};\n\nexport const mockMuseEEG = (sampleRate) => {\n let index = 0;\n return interval(1000 / sampleRate).pipe(\n  map(() => index += 1),\n  flatMap(transform),\n )\n};","import React, { useState } from \"react\";\nimport { Button, ButtonGroup, \n    Card, CardBody, \n    CardTitle, Container, \n    Col, Row, Dropdown,\n    DropdownItem, DropdownMenu, DropdownToggle } from \"shards-react\";\nimport { Line, Bar } from \"react-chartjs-2\";\nimport { emptyData, chartOptions, timeOptions, barOptions, emptyBandData} from \"../utils/mockData\";\nimport { MuseClient, zipSamples } from \"muse-js\";\nimport { catchError, multicast } from \"rxjs/operators\";\nimport { Subject } from \"rxjs\";\nimport { bandpassFilter, epoch, fft, powerByBand } from \"@neurosity/pipes\";\nimport { mockMuseEEG } from \"../utils/dataGen\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"shards-ui/dist/css/shards.min.css\";\n\nfunction EEGView() {\n\n    // Observable Source\n    var source$ = null;\n    var subject$ = null;\n\n    const labels = Array.from(Array(512).keys());\n\n    // Graph Data\n    const [data, setData] = useState(emptyData);\n    // FFT Data\n    const [bandData, setBandData] = useState(emptyBandData);\n    // Continuous Data\n    const [timeBandData, setTimeBandData] = useState([]);\n    // Source Set\n    const [connected, setConnected] = useState(false);\n    // Dropdown State\n    const [drop, setDrop] = useState(false);\n    // Channel State\n    const [channelState, setChannel] = useState(0);\n\n    // Pipeline Settings\n    const settings = {\n        lowCut: 2,\n        highCut: 50,\n        spRate: 256,\n        channels: 4,\n        // Time Between Windowing\n        int: 2,\n        duration: 512,\n    };\n\n    function buildEEGPipe() {\n        // Source Subject\n        subject$ = zipSamples(source$).pipe(\n            multicast(() => new Subject()),\n        );\n\n        let builtPipe$ = subject$.pipe(\n            bandpassFilter({\n                cutoffFrequencies: [settings.lowCut, settings.highCut],\n                nbChannels: settings.channels\n            }),\n            epoch({\n                interval: settings.int,\n                duration: settings.duration,\n                samplingRate: settings.spRate\n            }),\n            catchError(err => {\n                console.log(err);\n            })\n        );\n        // New Subject Multi Observers\n        //let multicast$ = builtPipe$.pipe(\n            //multicast(() => new Subject()),\n        //);\n        let subscription = builtPipe$.subscribe(streamData => {\n            setData(dataState => {\n                Object.values(dataState).forEach((channel, index) => {\n                    channel.data = streamData.data[index];\n                });\n                return {\n                    ch0: dataState.ch0,\n                    ch1: dataState.ch1,\n                    ch2: dataState.ch2,\n                    ch3: dataState.ch3,\n                };\n            });\n        });\n    }\n\n    function buildFFTPipe() {\n        if (!subject$) {\n            return \"Error\"\n        }\n        let builtPipe$ = subject$.pipe(\n            bandpassFilter({\n                cutoffFrequencies: [settings.lowCut, settings.highCut],\n                nbChannels: settings.channels\n            }),\n            epoch({\n                interval: 100,\n                duration: 1024,\n                samplingRate: settings.spRate,\n            }),\n            fft({ bins: 256}),\n            powerByBand(),\n            catchError(err => {\n                console.log(err);\n            })\n        );\n        let subscription = builtPipe$.subscribe(streamData => {\n            setBandData(bandState => {\n                Object.values(bandState).forEach((channel, index) => {\n                    channel.data = [\n                        streamData.alpha[index],\n                        streamData.beta[index],\n                    ]\n                });\n                return {\n                    ch0: bandState.ch0,\n                    ch1: bandState.ch1,\n                    ch2: bandState.ch2,\n                    ch3: bandState.ch3,\n                };\n            });\n            setTimeBandData(timeBand => {\n                return [...timeBand, streamData.beta[0]]\n            });\n        });\n    }\n\n    function connSim() {\n        source$ = mockMuseEEG(256);\n        buildEEGPipe();\n        buildFFTPipe();\n        subject$.connect();\n        setConnected(true);\n    }\n\n    async function connMuse() {\n        let client = new MuseClient();\n        await client.connect();\n        await client.start();\n        source$ = client.eegReadings\n        buildEEGPipe();\n        buildFFTPipe();\n        subject$.connect();\n        setConnected(true);\n    }\n\n    function disconnect() {\n        window.location.reload();\n    }\n\n    /**\n     * Chart View\n     * Displays the EEG Live View\n     * Based on thee current selected channel\n     * @param {*} props \n     */\n    function ChartView(props) {\n        return (\n            <Container>\n                {renderCharts(props.vals)}\n            </Container>\n        )\n    }\n    function renderCharts(dataValues) {\n        return Object.values(dataValues).map((channel, index) => {\n            if (index === channelState) {\n                return (\n                    <Col className=\"mb-4\">\n                    <Card key={index}>\n                      <CardBody>\n                          <CardTitle>{channel.name}</CardTitle>\n                          <Line data={{\n                              xLabels: labels,\n                              datasets: [{data: channel.data}]}} options={chartOptions}/>\n                      </CardBody>\n                    </Card>\n                    </Col>\n                );\n            } else {\n                return null;\n            }\n        });\n    }\n\n    /**\n     * Chart View\n     * Displays the EEG Live View\n     * Based on thee current selected channel\n     * @param {*} props \n     */\n    function BarView(props) {\n        return (\n            <Container>\n                {renderBars(props.vals)}\n            </Container>\n        )\n    }\n    function renderBars(dataValues) {\n        return Object.values(dataValues).map((channel, index) => {\n            if (index === channelState) {\n                console.log(channel.data);\n                return (\n                    <Col className=\"mb-4\">\n                    <Card key={index}>\n                      <CardBody>\n                          <CardTitle>{channel.name}</CardTitle>\n                          <Bar data={{\n                              xLabels: [\"Beta\", \"Alpha\"],\n                              datasets: [\n                                  {\n                                    data: channel.data,\n                                    backgroundColor: ['rgba(255, 0, 0, 0.9)', \n                                    'rgba(0, 0, 255, 0.9)'],\n                                  }\n                                ]\n                                }} \n                                  options={barOptions}/>\n                      </CardBody>\n                    </Card>\n                    </Col>\n                );\n            } else {\n                return null;\n            }\n        });\n    }\n\n\n\n    return (\n        <Container>\n            <Row>\n                <Col lg=\"8\" className=\"col-lg mb-4\">\n                        <ButtonGroup size=\"lg\">\n                            <Button disabled={connected} onClick={connMuse}>\n                                Muse Connect\n                            </Button>\n                            <Button disabled={connected} onClick={connSim}>\n                                Simulate Data\n                            </Button>\n                            <Button disabled={!connected} onClick={disconnect}>\n                                Disconnect\n                            </Button>\n                        </ButtonGroup>\n                </Col>\n                <Col lg=\"4\" className=\"col-lg mb-4\">\n                    <Dropdown size=\"lg\" open={drop} \n                    toggle={() => setDrop(prev => !prev)}> \n                    <DropdownToggle>Channel</DropdownToggle>\n                        <DropdownMenu>\n                            {Object.values(data).map((channel, index) => {\n                                return(<DropdownItem \n                                key={index}\n                                onClick={() => setChannel(index)}>\n                                    {channel.name}\n                                </DropdownItem>);\n                            })}\n                        </DropdownMenu>\n                    </Dropdown>\n                </Col>\n            </Row>\n            <Row>\n                {/* Live Signal and Control Panel */}\n                <Col className=\"col-lg mb-4\">\n                    <Row>\n                        <ChartView vals={data}/>\n                    </Row>\n                </Col>\n\n                {/* FFT Charts*/}\n                <Col className=\"col-lg mb-4\">\n                    <Row>\n                        <BarView vals={bandData}/>\n                    </Row>\n                </Col>\n            </Row>\n            {/* Accumulation Chart */}\n            <Row>\n            <Col className=\"col-lg mb-4\">\n                    <Card>\n                      <CardBody>\n                          <CardTitle>Focus</CardTitle>\n                          <Line data={{\n                              xLabels: Array.from(timeBandData.keys()),\n                              datasets: [{data: timeBandData}]}} options={timeOptions}/>\n                      </CardBody>\n                    </Card>\n            </Col>\n            <Col className=\"col-lg mb-4\">\n            </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default EEGView;\n","import React from \"react\";\nimport { Container, Card, CardBody, CardTitle, Row, Col} from \"shards-react\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"shards-ui/dist/css/shards.min.css\";\n\nimport EEGView from \"./components/EEGView\";\n\nfunction App() {\n  return (\n    <Container style={{marginTop: \"5px\"}}>\n      <Row className=\"mb-4\">\n      <Col className=\"col-lg\">\n      <Card>\n        <CardBody>\n          <CardTitle>Focus Pocus</CardTitle>\n          <p>The UC Berkeley Neurotechx Submission</p>\n        </CardBody>\n        </Card>\n      </Col>\n      </Row>\n      <EEGView/>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}