{"version":3,"sources":["../node_modules/@neurosity/pipes/dist/browser sync","utils/mockData.js","utils/dataGen.js","components/EEGView.js","App.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","emptyData","ch0","name","data","ch1","ch2","ch3","chartOptions","scales","xAxes","scaleLabel","display","labelString","yAxes","ticks","max","min","elements","line","borderColor","fill","point","radius","animation","duration","title","text","responsive","tooltips","enabled","legend","require","interval","from","map","flatMap","transform","index","timestamp","Date","now","pipe","electrode","samples","Array","_","Math","random","x","EEGView","source$","multicast$","labels","useState","setData","connected","setConnected","settings","buildPipe","builtPipe$","zipSamples","bandpassFilter","cutoffFrequencies","nbChannels","epoch","samplingRate","catchError","err","console","log","multicast","Subject","subscribe","streamData","dataState","Object","values","forEach","channel","connect","a","client","MuseClient","start","eegReadings","ChartView","props","renderCharts","vals","dataValues","xLabels","datasets","options","disabled","onClick","sampleRate","mockMuseEEG","window","location","reload","App","style","marginTop","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.95367f6f.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 364;","\nexport const emptyData = {\n    ch0: {\n        name: \"\",\n        data: []\n    },\n    ch1: {\n        name: \"\",\n        data: []\n    },\n    ch2: {\n        name: \"\",\n        data: []\n    },\n    ch3: {\n        name: \"\",\n        data: []\n    }\n};\n\nexport const chartOptions = {\n    scales: {\n      xAxes: [\n        {\n          scaleLabel: {\n            display: true,\n            labelString: \"Electrical Activity\"\n          }\n        }\n      ],\n      yAxes: [\n        {\n          scaleLabel: {\n            display: true,\n            labelString: \"Time\"\n          },\n          ticks: {\n            max: 300,\n            min: -300\n          }\n        }\n      ]\n    },\n    elements: {\n        line: {\n            borderColor: 'rgba( 128 , 128, 128)',\n            fill: false\n        },\n        point: {\n            radius: 0\n        }\n    },\n    animation: {\n        duration: 0\n    },\n    title: {\n      display: true,\n      text: \"Signal\"\n    },\n    responsive: true,\n    tooltips: { enabled: false },\n    legend: { display: false }\n  };\n\n","const { interval, from } = require('rxjs');\nconst { map, flatMap } = require('rxjs/operators');\n\nconst samples = () => {\n return Array(12)\n  .fill()\n  .map(_ => Math.random()).map(function(x) {return x * 100});\n};\n\nconst transform = (index) => {\n const timestamp = Date.now();\n let chanNums = [0, 1, 2, 3];\n return from(chanNums).pipe(\n  map(electrode => ({\n   timestamp,\n   electrode,\n   index,\n   samples: samples()\n  }))\n )\n};\n\nexport const mockMuseEEG = (sampleRate) => {\n let index = 0;\n return interval(1000 / sampleRate).pipe(\n  map(() => index += 1),\n  flatMap(transform),\n )\n};","import React, { useState } from \"react\";\nimport { Button, ButtonGroup, Card, CardBody, CardTitle, Container } from \"shards-react\";\nimport { Line } from \"react-chartjs-2\";\nimport { emptyData, chartOptions} from \"../utils/mockData\";\nimport { MuseClient, zipSamples } from \"muse-js\";\nimport { catchError, multicast } from \"rxjs/operators\";\nimport { Subject } from \"rxjs\";\nimport { bandpassFilter, epoch } from \"@neurosity/pipes\";\nimport { mockMuseEEG } from \"../utils/dataGen\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"shards-ui/dist/css/shards.min.css\";\n\nfunction EEGView() {\n\n    // Observable Source\n    var source$ = null;\n    var multicast$ = null;\n    var subscription = null;\n\n    const labels = Array.from(Array(512).keys());\n\n    // Graph Data\n    const [data, setData] = useState(emptyData);\n    // Source Set\n    const [connected, setConnected] = useState(false);\n\n    // Pipeline Settings\n    const settings = {\n        lowCut: 2,\n        highCut: 50,\n        spRate: 256,\n        channels: 4,\n        // Time Between Windowing\n        int: 2,\n        duration: 512,\n    };\n\n    function buildPipe() {\n        let builtPipe$ = zipSamples(source$).pipe(\n            bandpassFilter({\n                cutoffFrequencies: [settings.lowCut, settings.highCut],\n                nbChannels: settings.channels\n            }),\n            epoch({\n                interval: settings.int,\n                duration: settings.duration,\n                samplingRate: settings.spRate\n            }),\n            catchError(err => {\n                console.log(err);\n            })\n        );\n        // New Subject Multi Observers\n        multicast$ = builtPipe$.pipe(\n            multicast(() => new Subject()),\n        );\n        subscription = multicast$.subscribe(streamData => {\n            setData(dataState => {\n                Object.values(dataState).forEach((channel, index) => {\n                    channel.data = streamData.data[index];\n                });\n                return {\n                    ch0: dataState.ch0\n                };\n            });\n        });\n        multicast$.connect();\n        setConnected(true);\n    }\n\n\n    async function connMuse() {\n        let client = new MuseClient();\n        await client.connect();\n        await client.start();\n        source$ = client.eegReadings\n        buildPipe();\n    }\n\n    function ChartView(props) {\n        return (\n            <Container>\n                {renderCharts(props.vals)}\n            </Container>\n        )\n    }\n    function renderCharts(dataValues) {\n        console.log(data.ch0.data)\n        return Object.values(dataValues).map((channel, index) => {\n            if (index === 0) {\n                return (\n                    <Card key={index}>\n                      <CardBody>\n                          <CardTitle>{channel.name}</CardTitle>\n                          <Line data={{\n                              xLabels: labels,\n                              datasets: [{data: channel.data}]}} options={chartOptions}/>\n                      </CardBody>\n                    </Card>\n                );\n            } else {\n                return null;\n            }\n        });\n    }\n\n    function connSim() {\n        source$ = mockMuseEEG(256);\n        buildPipe();\n    }\n\n    function disconnect() {\n        window.location.reload();\n    }\n\n    return (\n        <Container>\n            <Card key={0}>\n                <ButtonGroup>\n                    <Button disabled={connected} onClick={connMuse}>\n                        Muse Connect\n                    </Button>\n                    <Button disabled={connected} onClick={connSim}>\n                        Simulate Data\n                    </Button>\n                    <Button disabled={!connected} onClick={disconnect}>\n                        Disconnect\n                    </Button>\n                </ButtonGroup>\n            </Card>\n            <ChartView vals={data}/>\n        </Container>\n    );\n}\n\nexport default EEGView;\n","import React from \"react\";\nimport { Container, Card, CardBody, CardTitle } from \"shards-react\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"shards-ui/dist/css/shards.min.css\";\n\nimport EEGView from \"./components/EEGView\";\n\nfunction App() {\n  return (\n    <Container style={{marginTop: \"5px\"}}>\n      <Card>\n        <CardBody>\n          <CardTitle>Focus Pocus</CardTitle>\n          <p>The UC Berkeley Neurotechx Submission</p>\n        </CardBody>\n      </Card>\n      <EEGView/>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}